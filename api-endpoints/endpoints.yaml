openapi: 3.0.0
info:
  title: MaduChat API
  version: 1.3.0
  contact: 
    name: Madu-de
    url: https://github.com/Madu-de
    email: kontakt.madu@gmail.com
  license: 
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.de.html
servers:
  - url: http://localhost:3000
    description: Nest.js local server
tags: 
  - name: root
    description: Root Endpoints
    x-displayName: Root
  - name: auth
    description: Auth Endpoints
    x-displayName: Auth
  - name: user
    description: User Endpoints
    x-displayName: User
  - name: userprofilepicture
    description: User profile picture Endpoints
    x-displayName: User profile picture
  - name: usersettings
    description: User settings Endpoints
    x-displayName: User settings
  - name: userreviews
    description: User reviews Endpoints
    x-displayName: User reviews
  - name: friends
    description: Friends Endpoints
    x-displayName: Friends
  - name: chat
    description: Chat Endpoints
    x-displayName: Chat
  - name: message
    description: Message Endpoints
    x-displayName: Message
  - name: reviews
    description: Review Endpoints
    x-displayName: Reviews
    
  - name: webhook
    description: Webhook Events
    x-displayName: Webhook
paths:
  /:
    get:
      operationId: test-api
      security: []
      tags: 
        -  root
      summary: Get Hello
      description: Request this endpoint to check if the api is available. Returns "MaduChat programmed by Madu"
      responses:
        '200':
          description: OK
          content:
            text/plain;charset=UTF-8:
              schema: 
                type: string
                example: MaduChat programmed by Madu
  /auth/login:
    post: 
      operationId: login
      security: []
      tags: 
        -  auth
      summary: Login
      description: Returns an access_token when the data is correct
      requestBody: 
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                username:
                  type: string
                  example: madu
                password:
                  type: string
                  example: myPassword!1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: myAccessToken
        '401':
          description: Password or Username wrong
  /auth/register:
    post:
      operationId: register
      security: []
      tags: 
        -  auth
      summary: Register
      description: Returns an access_token when everything is fine
      requestBody: 
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                name:
                  type: string
                  example: Madu
                username:
                  type: string
                  example: madu
                email:
                  type: string
                  example: madu@example.com
                password:
                  type: string
                  example: myPassword!1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: myAccessToken
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: string
                      example: ExampleError
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: number
                    example: 400
  /users/{id}:
    get:
      operationId: get-user
      security: 
        - JWT: []
      tags: 
        - user
      summary: Get User
      description: Returns the user with the given id or the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          description: User id or 'me'
          schema:
            type: string
        - name: friends
          in: query
          required: false
          description: Get friend data too
          schema:
            type: boolean
        - name: chats
          in: query
          required: false
          description: Get chats too
          schema:
            type: boolean
        - name: settings
          in: query
          required: false
          description: Get settings too
          schema:
            type: boolean
        - name: reviews
          in: query
          required: false
          description: Get writtenReviews, recievedReviews and reviewStats too
          schema:
            type: boolean
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '400':
          description: User not found
        '401':
          description: Unauthorized
  /users:
    get:
      operationId: get-users-like
      security: 
        - JWT: []
      tags: 
        - user
      summary: Get Users like
      description: Returns all users which includes the "like" parameter 
      parameters:
        - name: like
          in: query
          required: true
          description: Chars contained in username or name of users
          schema:
            type: string
        - name: friends
          in: query
          required: false
          description: Get friend data too
          schema:
            type: boolean
        - name: chats
          in: query
          required: false
          description: Get chats too
          schema:
            type: boolean
        - name: settings
          in: query
          required: false
          description: Get settings too
          schema:
            type: boolean
        - name: reviews
          in: query
          required: false
          description: Get writtenReviews, recievedReviews and reviewStats too
          schema:
            type: boolean
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '400':
          description: Parameter 'like' is required
        '401':
          description: Unauthorized
  /users/{id}/profilepicture:
    get: 
      operationId: getProfilePicture
      security: 
        -  JWT: []
      tags: 
        - userprofilepicture
      summary: Get profile picture
      description: Returns the profilepicture of the user
      parameters: 
        - name: id
          in: path
          required: true
          description: The id of the user
          schema: 
            type: string
      responses: 
        '200':
          description: OK
          content:
            blob:
              schema: 
                type: string
                format: binary
        '400':
          description: |
            - User not found
            - User has no profile picture
        '401':
          description: Unauthorized
  /users/me/profilepicture:
    put: 
      operationId: putProfilePicture
      security: 
        -  JWT: []
      tags: 
        - userprofilepicture
      summary: Put profile picture
      description: Changes the profilepicture of the requested user
      requestBody:
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses: 
        '200':
          description: OK
          content:
            blob:
              schema: 
                type: string
                format: binary
        '400':
          description: User not found
        '401':
          description: Unauthorized
    delete:
      operationId: deleteProfilePicture
      security: 
        -  JWT: []
      tags: 
        - userprofilepicture
      summary: Delete profile picture
      description: Deletes the profilepicture of the requested user
      responses: 
        '200':
          description: OK
        '400':
          description: User not found
        '401':
          description: Unauthorized
  /users/me/settings:
    post:
      operationId: postsettings
      security: 
        -  JWT: []
      tags: 
        -  usersettings
      summary: Post settings
      description: Saves new settings of the requested user
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Settings"
        '400':
          description: |
            Datatype of '{key}' value is not the same as needed. Is: '{datatypeOfKey}' Has to be: '{datatypeOfSetting}'
        '401':
          description: Unauthorized
  /users/me/settings/{key}:
    post:
      operationId: postsetting
      security: 
        -  JWT: []
      tags: 
        -  usersettings
      summary: Post setting
      description: Changes one setting of the requested user settings
      parameters: 
        - name: key
          in: path
          required: true
          schema: 
            type: string
      requestBody: 
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                value:
                  type: string
                  example: Deutsch
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Settings"
        '400':
          description: |
            Datatype of '{key}' value is not the same as needed. Is: '{datatypeOfKey}' Has to be: '{datatypeOfSetting}'
        '401':
          description: Unauthorized
  /users/{id}/review:
    parameters: 
      - name: id
        in: path
        required: true
        schema: 
          type: string
    post:
      operationId: writereview
      security: 
        -  JWT: []
      tags: 
        -  userreviews
      summary: Post review
      description: Send a review to the user, which has the given id
      requestBody: 
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                stars:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 3
                review:
                  type: string
                  example: I don't like this user very much
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Review"
        '400':
          description: |
            - User is not allowed to review himself
            - User is not allowed to review this user twice
            - Invalid review. Stars must be between 1 and 5
        '401':
          description: Unauthorized
    delete:
      operationId: deletereview
      security: 
        -  JWT: []
      tags: 
        -  userreviews
      summary: Delete review
      description: Delete the received review of the user, which has the given id (written by the requester)
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Review"
        '400':
          description: There is no review written by the requester
        '401':
          description: Unauthorized
  /friends:
    post: 
      operationId: postFriend
      security: 
        -  JWT: []
      tags: 
        - friends
      summary: Send friend request
      description: Sends an friend request to the given user
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                friendId:
                  type: string
                  example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '400':
          description: |
            - You cannot send a friend request to a friend
            - friendId is required
        '401':
          description: Unauthorized
    delete:
      operationId: deleteFriend
      security: 
        -  JWT: []
      tags: 
        - friends
      summary: Delete friend
      description: Removes friend/friend request
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                friendId:
                  type: string
                  example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '400':
          description: friendId is required
        '401':
          description: Unauthorized
  /chat/{id}:
    parameters: 
      - name: id
        in: path
        required: true
        description: The id of the chat
        schema: 
          type: string
    get:
      operationId: getChat
      security: 
        -  JWT: []
      tags: 
        - chat
      summary: Get chat
      description: Returns the requested chat
      parameters: 
        - name: members
          in: query
          required: false
          description: Return members too
          schema: 
            type: boolean
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Chat"
        '401':
          description: Unauthorized
        '405':
          description: Not Allowed
    put:
      operationId: putChat
      security: 
        -  JWT: []
      tags: 
        - chat
      summary: Edit chat
      description: Edit chat attributes as admin
      requestBody: 
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                chat:
                  $ref: "#/components/schemas/Chat"
      responses: 
        '201':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Chat"
        '400':
          description: |
            - Cannot change chat id
            - You are not an admin
            - You cannot kick admins
            - You can only add friends to your chat
            - name must be shorter than or equal to 20 characters
            - name must be longer than or equal to 1 characters
        '401':
          description: Unauthorized
        '405':
          description: Not Allowed
    delete:
      operationId: deleteChat
      security: 
        -  JWT: []
      tags: 
        - chat
      summary: Delete chat
      description: |
        :::warning

        Feature is not finished. Responses in development. Works, if request is fine
        
        :::
        Delete chat as admin
      responses: 
        '201':
          description: OK
        '401':
          description: Unauthorized
  /chat/{id}/messages:
    get: 
      operationId: getChatMessages
      security: 
        -  JWT: []
      tags: 
        - chat
      summary: Get chat messages
      description: Returns the messages of the requested chat
      parameters: 
        - name: id
          in: path
          required: true
          description: The id of the chat
          schema: 
            type: string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        '401':
          description: Unauthorized
        '405':
          description: Not Allowed
  /chat:
    post:
      operationId: postChat
      security: 
        -  JWT: []
      tags: 
        - chat
      summary: Post chat
      description: Creates a chat with sender as owner
      requestBody: 
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                memberids:
                  type: array
                  items:
                    type: string
                    example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Chat"
        '400':
          description: |
            - Some members were not found
            - {id} is not a friend of the owner
        '401':
          description: Unauthorized
  /message/{id}:
    get:
      operationId: getMessage
      security: 
        -  JWT: []
      tags: 
        -  message
      summary: Get message
      description: Get message from id
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the message
          schema: 
            type: string
        - name: author
          in: query
          required: false
          description: Get author too
          schema: 
            type: boolean
        - name: chat
          in: query
          required: false
          description: Get chat too
          schema: 
            type: boolean
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        '401':
          description: Unauthorized
        '405':
          description: Not Allowed
    post:
      operationId: sendMessage
      security: 
        -  JWT: []
      tags: 
        - message
      summary: Post message
      description: Creates a message in the specified chat
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the chat
          schema: 
            type: string
      requestBody: 
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                message:
                  type: string
                  example: Example message
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        '401':
          description: Unauthorized
        '405':
          description: Not Allowed
  /review/written/{userid}:
    get:
      operationId: getWrittenReviews
      security: 
        -  JWT: []
      tags: 
        - reviews
      summary: Get written reviews
      description: Get the last 20 written reviews of the user
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user
          schema: 
            type: string
        - name: offset
          in: query
          required: false
          description: Offset (Use 20 to get the next 20 written reviews)
          schema: 
            type: number
            example: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Review"
        '401':
          description: Unauthorized
  /review/recieved/{userid}:
    get:
      operationId: getRecievedReviews
      security: 
        -  JWT: []
      tags: 
        - reviews
      summary: Get recieved reviews
      description: Get the last 20 recieved reviews of the user
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user
          schema: 
            type: string
        - name: offset
          in: query
          required: false
          description: Offset (Use 20 to get the next 20 recieved reviews)
          schema: 
            type: number
            example: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Review"
        '401':
          description: Unauthorized








x-webhooks:
  joinChat:
    post:
      operationId: joinChat
      security: []
      tags:
        - webhook
      summary: joinChat
      description: Join a chat to get all new messages from the webhook
      parameters: 
        - name: authorization
          in: header
          description: Bearer <Token>
          required: true
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                chatid:
                  type: string
                  example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
      responses:
        '200':
          description: |
            If anything is fine, 'error' will not be triggered
        '40x':
          description: |
            Triggers 'error' WS-Event on client:
            - Unauthorized
            - Not Allowed
  sendMessage:
    post: 
      operationId: sendMessageEvent
      security: []
      tags: 
        -  webhook
      summary: sendMessage
      description: Send a message in joined chat
      parameters: 
        - name: authorization
          in: header
          description: Bearer <Token>
          required: true
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                message:
                  type: string
                  example: Example message
      responses:
        '200':
          description: |
            If anything is fine, 'error' will not be triggered and 'message' will be called. Inside it will be the sent message
        '40x':
          description: |
            Triggers 'error' WS-Event on client:
            - Unauthorized
            - Not Allowed
      

components: 
  securitySchemes: 
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties: 
        id: 
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        email:
          type: string
          example: madu@example.com
        name:
          type: string
          example: Madu
        username: 
          type: string
          example: madu
        isAdmin:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: false
        isOnline:
          type: boolean
          example: true
        friendRequestsSent:
          type: array
          items:
            $ref: "#/components/schemas/UserLite"
        friendRequestsReceived:
          type: array
          items:
            $ref: "#/components/schemas/UserLite"
        friends:
          type: array
          items:
            $ref: "#/components/schemas/UserLite"
        settings:
          $ref: "#/components/schemas/Settings"
        chats:
          type: array
          items:
            $ref: "#/components/schemas/Chat"
        writtenReviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        receivedReviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        reviewStats:
          $ref: "#/components/schemas/ReviewStats"
    UserLite:
      type: object
      description: This schema is actually not existing. Its the [User](user) schema without relations to make the examples easier to read
      properties: 
        id: 
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        email:
          type: string
          example: madu@example.com
        name:
          type: string
          example: Madu
        username: 
          type: string
          example: madu
        isAdmin:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: false
        isOnline:
          type: boolean
          example: true
    Settings:
      type: object
      properties:
        id:
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        language:
          type: string
          enum: [English, Deutsch, Français, Español]
          example: Français
        showAvatar:
          type: boolean
          example: false
        onlinePrivacy:
          type: string
          enum: [everyone, friends, noone]
          example: everyone
    Chat:
      type: object
      properties:
        id:
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        name:
          type: string
          example: Example chat
        isPublic:
          type: boolean
          example: true
        isAdminChat:
          type: boolean
          example: false
        admins:
          type: array
          items: 
            $ref: "#/components/schemas/UserLite"
        members:
          type: array
          items: 
            $ref: "#/components/schemas/UserLite"
    Message:
      type: object
      properties:
        id:
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        message:
          type: string
          example: This is a message
        chat:
          $ref: "#/components/schemas/Chat"
        author:
          $ref: "#/components/schemas/UserLite"
        createdAt:
          format: date
    Review:
      type: object
      properties: 
        id:
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        author:
          $ref: "#/components/schemas/UserLite"
        target:
          $ref: "#/components/schemas/UserLite"
        text:
          type: string
          example: This is a review
        stars:
          type: number
          minimum: 1
          maximum: 5
          example: 2
        createdAt:
          format: date
        updatedAt:
          format: date
    ReviewStats:
      type: object
      properties:
        id:
          type: string
          example: a0f22b2e-a038-4f11-a8f1-6f5f3474fa7d
        avarageReceivedStars:
          type: number
          minimum: 0
          maximum: 5
          example: 3.25
        avarageSentStars:
          type: number
          minimum: 0
          maximum: 5
          example: 2.5
        totalReceivedStars:
          type: number
          example: 23
        totalSentStars:
          type: number
          example: 6
        totalSentReviews:
          type: number
          example: 65
        totalReceived1Star:
          type: number
          example: 4
        totalReceived2Star:
          type: number
          example: 45
        totalReceived3Star:
          type: number
          example: 3
        totalReceived4Star:
          type: number
          example: 7
        totalReceived5Star:
          type: number
          example: 2
        totalSent1Star:
          type: number
          example: 23
        totalSent2Star:
          type: number
          example: 22
        totalSent3Star:
          type: number
          example: 76
        totalSent4Star:
          type: number
          example: 23
        totalSent5Star:
          type: number
          example: 0